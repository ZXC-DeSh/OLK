import telebot
from telebot import types
import re

TOKEN = '8080966559:AAGvsCE5cL1FfREmrJqTTNO1WfZmiR5-Bug'
bot = telebot.TeleBot(TOKEN)

TARGET_CHAT_ID = -1002860241295  # —á–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–æ—Ä–º—ã
FEEDBACK_THREAD_ID = 20  # message_thread_id –¥–ª—è —Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
ISSUES_THREAD_ID = 21    # message_thread_id –¥–ª—è —Ç–µ–º—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π

user_states = {}

# --- –ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_main_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    btn_suggestion = types.InlineKeyboardButton('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='suggestion')
    btn_complaint = types.InlineKeyboardButton('üò† –ñ–∞–ª–æ–±–∞', callback_data='complaint')
    btn_gratitude = types.InlineKeyboardButton('‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', callback_data='gratitude')
    btn_malfunction = types.InlineKeyboardButton('‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å / –ø–æ–ª–æ–º–∫–∞', callback_data='malfunction')
    keyboard.add(btn_suggestion, btn_complaint, btn_gratitude, btn_malfunction)
    return keyboard

def create_form_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    keyboard.add(btn_cancel)
    return keyboard

def create_gratitude_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    btn_anonymous = types.InlineKeyboardButton('ü§´ –ê–Ω–æ–Ω–∏–º–Ω–æ', callback_data='gratitude_anonymous')
    btn_with_name = types.InlineKeyboardButton('üìù –° –§–ò–û', callback_data='gratitude_with_name')
    btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    keyboard.add(btn_anonymous, btn_with_name, btn_cancel)
    return keyboard

# --- –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def clear_state(user_id):
    user_states[user_id] = {'state': None, 'data': {}}

def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = {'state': None, 'data': {}}
    return user_states[user_id]

# --- –ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
def is_valid_email(email):
    email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"  # —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    return re.match(email_pattern, email) is not None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start'])
def start(msg):
    user_id = msg.from_user.id
    clear_state(user_id)
    welcome_message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    keyboard = create_main_keyboard()
    bot.send_message(user_id, welcome_message, reply_markup=keyboard)

@bot.message_handler(commands=['id'])
def send_chat_id(message):
    bot.reply_to(message, f"Chat ID: {message.chat.id}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    if call.data == 'suggestion':
        bot.answer_callback_query(call.id)
        ask_fio(call.message, message_id)
    elif call.data == 'complaint':
        bot.answer_callback_query(call.id)
        ask_complaint(call.message, message_id)
    elif call.data == 'gratitude':
        bot.answer_callback_query(call.id)
        ask_gratitude_option(call.message, message_id)
    elif call.data == 'gratitude_anonymous':
        bot.answer_callback_query(call.id)
        ask_gratitude_anonymous(call.message, message_id)
    elif call.data == 'gratitude_with_name':
        bot.answer_callback_query(call.id)
        ask_fio(call.message, message_id)
        user_states[user_id]['state'] = 'gratitude_with_name'
    elif call.data == 'malfunction':
        bot.answer_callback_query(call.id)
        ask_malfunction_info(call.message, message_id, 'department')
    elif call.data == 'cancel':
        bot.answer_callback_query(call.id)
        clear_state(user_id)
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_keyboard()
        )
    else:
        bot.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
def ask_fio(message, message_id):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'suggestion', 'data': {}}
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=create_form_keyboard()
    )

def ask_complaint(message, message_id):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'complaint', 'data': {}}
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=create_form_keyboard()
    )

def ask_gratitude_option(message, message_id):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'gratitude_option', 'data': {}}
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text="–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å?",
        reply_markup=create_gratitude_keyboard()
    )

def ask_gratitude_anonymous(message, message_id):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'gratitude_anonymous', 'data': {}}
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:",
        reply_markup=create_form_keyboard()
    )

def ask_malfunction_info(message, message_id, step):
    user_id = message.chat.id
    user_state = get_user_state(user_id)

    if step == 'department':
        user_state['state'] = 'malfunction_department'
        bot.edit_message_text(
            chat_id=user_id, message_id=message_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:",
            reply_markup=create_form_keyboard()
        )
    elif step == 'floor':
        user_state['state'] = 'malfunction_floor'
        user_state['data']['department'] = message.text
        bot.send_message(
            user_id,
            "–£–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:",
            reply_markup=create_form_keyboard()
        )
    elif step == 'description':
        user_state['state'] = 'malfunction_description'
        user_state['data']['floor'] = message.text
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å (–ø—Ä–æ–±–ª–µ–º–∞/–ø–æ–ª–æ–º–∫–∞):",
            reply_markup=create_form_keyboard()
        )

@bot.message_handler(func=lambda msg: True, content_types=['text'])
def process_message(msg):
    user_id = msg.from_user.id
    user_state = get_user_state(user_id)

    try:
        if user_state['state'] == 'suggestion':
            if 'fio' not in user_state['data']:
                user_state['data']['fio'] = msg.text
                bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
            elif 'email' not in user_state['data']:
                email = msg.text
                if is_valid_email(email):
                    user_state['data']['email'] = email
                    bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
                else:
                    bot.send_message(
                        user_id,
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.\n"
                        "–ü—Ä–∏–º–µ—Ä: example@domain.com",
                    )
                    return
            else:
                user_state['data']['description'] = msg.text
                report = (
                    "*–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:*\n"
                    f"*–§–ò–û:* {user_state['data']['fio']}\n"
                    f"*Email:* {user_state['data']['email']}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
                )
                bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown', message_thread_id=FEEDBACK_THREAD_ID)
                bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=create_main_keyboard())
                clear_state(user_id)

        elif user_state['state'] == 'complaint':
            user_state['data']['description'] = msg.text
            report = f"*–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:*\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
            bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown', message_thread_id=FEEDBACK_THREAD_ID)
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë.", reply_markup=create_main_keyboard())
            clear_state(user_id)

        elif user_state['state'] == 'gratitude_anonymous':
            user_state['data']['description'] = msg.text
            report = f"*–ù–æ–≤–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (–∞–Ω–æ–Ω–∏–º–Ω–æ):*\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
            bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown', message_thread_id=FEEDBACK_THREAD_ID)
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!", reply_markup=create_main_keyboard())
            clear_state(user_id)

        elif user_state['state'] == 'gratitude_with_name':
            if 'fio' not in user_state['data']:
                user_state['data']['fio'] = msg.text
                bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:")
            else:
                user_state['data']['description'] = msg.text
                report = (
                    "*–ù–æ–≤–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:*\n"
                    f"*–§–ò–û:* {user_state['data']['fio']}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
                )
                bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown', message_thread_id=FEEDBACK_THREAD_ID)
                bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!", reply_markup=create_main_keyboard())
                clear_state(user_id)

        elif user_state['state'] == 'malfunction_department':
            user_state['data']['department'] = msg.text
            ask_malfunction_info(msg, msg.message_id, 'floor')

        elif user_state['state'] == 'malfunction_floor':
            user_state['data']['floor'] = msg.text
            ask_malfunction_info(msg, msg.message_id, 'description')

        elif user_state['state'] == 'malfunction_description':
            user_state['data']['description'] = msg.text
            report = (
                "*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å/–ø–æ–ª–æ–º–∫—É:*\n"
                f"*–û—Ç–¥–µ–ª–µ–Ω–∏–µ:* {user_state['data'].get('department', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–≠—Ç–∞–∂:* {user_state['data'].get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:* {user_state['data']['description']}"
            )
            bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown', message_thread_id=ISSUES_THREAD_ID)
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=create_main_keyboard())
            clear_state(user_id)

        else:
            welcome_message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é."
            keyboard = create_main_keyboard()
            bot.send_message(user_id, welcome_message, reply_markup=keyboard)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=create_main_keyboard(),
        )
        clear_state(user_id)

if __name__ == '__main__':
    print("Bot is running...")
    bot.polling(none_stop=True)