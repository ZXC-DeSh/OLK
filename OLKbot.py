import telebot
from telebot import types
import re

TOKEN = '8080966559:AAGvsCE5cL1FfREmrJqTTNO1WfZmiR5-Bug'
bot = telebot.TeleBot(TOKEN)

TARGET_CHAT_ID = -1002860241295  # –ß–∞—Ç –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–æ—Ä–º—ã

user_states = {}

# --- –ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_inline_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    btn_suggestion = types.InlineKeyboardButton('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='suggestion')
    btn_complaint = types.InlineKeyboardButton('üò† –ñ–∞–ª–æ–±–∞', callback_data='complaint')
    btn_gratitude = types.InlineKeyboardButton('‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', callback_data='gratitude')
    keyboard.add(btn_suggestion, btn_complaint, btn_gratitude)
    return keyboard

# --- –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
def clear_state(user_id):
    user_states[user_id] = {'state': None, 'data': {}}

def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = {'state': None, 'data': {}}
    return user_states[user_id]

# --- –ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
def is_valid_email(email):
    email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return re.match(email_pattern, email) is not None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start'])
def start(msg):
    user_id = msg.from_user.id
    clear_state(user_id)
    welcome_message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    keyboard = create_inline_keyboard()
    bot.send_message(user_id, welcome_message, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    if call.data == 'suggestion':
        bot.answer_callback_query(call.id)
        ask_fio(call.message)
    elif call.data == 'complaint':
        bot.answer_callback_query(call.id)
        ask_complaint(call.message)
    elif call.data == 'gratitude':
        bot.answer_callback_query(call.id)
        ask_gratitude(call.message)
    else:
        bot.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
def ask_fio(message):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'suggestion', 'data': {}}
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

def ask_complaint(message):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'complaint', 'data': {}}
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")

def ask_gratitude(message):
    user_id = message.chat.id
    user_states[user_id] = {'state': 'gratitude', 'data': {}}
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:")

@bot.message_handler(func=lambda msg: True, content_types=['text'])
def process_message(msg):
    user_id = msg.from_user.id
    user_state = get_user_state(user_id)

    try:
        if user_state['state'] == 'suggestion':
            if 'fio' not in user_state['data']:
                user_state['data']['fio'] = msg.text
                bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
            elif 'email' not in user_state['data']:
                email = msg.text
                if is_valid_email(email):
                    user_state['data']['email'] = email
                    bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
                else:
                    bot.send_message(
                        user_id,
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.\n"
                        "–ü—Ä–∏–º–µ—Ä: example@domain.com",
                    )
                    return
            else:
                user_state['data']['description'] = msg.text
                report = (
                    "*–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:*\n"
                    f"*–§–ò–û:* {user_state['data']['fio']}\n"
                    f"*Email:* {user_state['data']['email']}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
                )
                bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown')
                bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=create_inline_keyboard())
                clear_state(user_id)

        elif user_state['state'] == 'complaint':
            user_state['data']['description'] = msg.text
            report = f"*–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:*\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
            bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown')
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë.", reply_markup=create_inline_keyboard())
            clear_state(user_id)

        elif user_state['state'] == 'gratitude':
            user_state['data']['description'] = msg.text
            report = f"*–ù–æ–≤–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:*\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {user_state['data']['description']}"
            bot.send_message(TARGET_CHAT_ID, report, parse_mode='Markdown')
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!", reply_markup=create_inline_keyboard())
            clear_state(user_id)
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.", reply_markup=create_inline_keyboard())

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=create_inline_keyboard(),
        )
        clear_state(user_id)

if __name__ == '__main__':
    print("Bot is running...")
    bot.polling(none_stop=True)
